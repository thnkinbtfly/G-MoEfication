"""
X-Stance: A Multilingual Multi-Target Dataset for Stance Detection
http://ceur-ws.org/Vol-2624/paper9.pdf

The x-stance dataset consists of more than 150 political questions and 67,000 comments by candidates.
It can be used to train and evaluate stance detection systems.
Comments are in German, French and Italian (for this task only the German subset has been selected). Questions are given in all three languages and English.
The data have been extracted from the Swiss voting advice platform Smartvote.

https://github.com/ZurichNLP/xstance
"""
import datasets
from lm_eval.base import Task, rf
from lm_eval.metrics import mean
from functools import partial
import numpy as np

_CITATION = """
@inproceedings{vamvas2020xstance,
    author    = "Vamvas, Jannis and Sennrich, Rico",
    title     = "{X-Stance}: A Multilingual Multi-Target Dataset for Stance Detection",
    booktitle = "Proceedings of the 5th Swiss Text Analytics Conference (SwissText)  16th Conference on Natural Language Processing (KONVENS)",
    address   = "Zurich, Switzerland",
    year      = "2020",
    month     = "jun",
    url       = "http://ceur-ws.org/Vol-2624/paper9.pdf"
}
"""


# Helper functions for aggregation (separate function for each metric)
def _xstance_agg_precision(items):
    references, predictions = zip(*items)
    precision_metric = datasets.load_metric("precision")
    return precision_metric.compute(
        references=references,
        predictions=predictions,
        average="macro",
    )["precision"]


def _xstance_agg_recall(items):
    references, predictions = zip(*items)
    recall_metric = datasets.load_metric("recall")
    return recall_metric.compute(
        references=references,
        predictions=predictions,
        average="macro",
    )["recall"]


def _xstance_agg_f1(items):
    references, predictions = zip(*items)
    f1_metric = datasets.load_metric("f1")
    return f1_metric.compute(
        references=references,
        predictions=predictions,
        average="macro",
    )["f1"]


class XStance(Task):
    VERSION = 0
    DATASET_PATH = "strombergnlp/x-stance"
    DATASET_NAME = None
    TOPIC = None
    OPINION = None
    STANCE = None
    AGAINST = None
    FAVOR = None
    AGAINST_IDX = 0
    FAVOR_IDX = 1

    def has_training_docs(self):
        return True

    def has_validation_docs(self):
        return True

    def has_test_docs(self):
        return True

    def training_docs(self):
        return self.dataset["train"]

    def validation_docs(self):
        return self.dataset["validation"]

    def test_docs(self):
        return self.dataset["test"]

    def doc_to_text(self, doc):
        return (
            self.TOPIC
            + doc["question"]
            + "\n\n"
            + self.OPINION
            + doc["comment"]
            + "\n\n"
            + self.STANCE
        )

    def doc_to_target(self, doc):
        target = doc["label"]
        if target == self.AGAINST_IDX:
            return " " + self.AGAINST
        else:
            return " " + self.FAVOR

    def construct_requests(self, doc, ctx):
        """Uses RequestFactory to construct Requests and returns an iterable of
        Requests which will be sent to the LM.

        :param doc:
            The document as returned from training_docs, validation_docs, or
            test_docs.
        :param ctx: str
            The context string, generated by fewshot_context. This includes the natural
            language description, as well as the few shot examples, and the question
            part of the document for `doc`.
        """
        # rf.loglikelihood as the task is a classification problem. For each document the model predicts loglikelihood for the correct label
        # ctx is the fully formatted fewshot example, i.e. K examples + comment to rate
        ll_against = rf.loglikelihood(ctx, " " + self.AGAINST)
        ll_favor = rf.loglikelihood(ctx, " " + self.FAVOR)

        return ll_against, ll_favor

    def process_results(self, doc, results):
        """Take a single document and the LM results and evaluates, returning a
        dict where keys are the names of submetrics and values are the values of
        the metric for that one document

        :param doc:
            The document as returned from training_docs, validation_docs, or test_docs.
        :param results:
            The results of the requests created in construct_requests.
        """

        pred = 0
        against, favor = results

        # Evaluation metrics will only work with numerical labels
        if against[0] > favor[0]:
            pred = self.AGAINST_IDX
        else:
            pred = self.FAVOR_IDX

        true_label = doc["label"]

        return {
            "acc": pred == true_label,
            "precision": (true_label, pred),
            "recall": (true_label, pred),
            "f1": (true_label, pred),
        }

    def aggregation(self):
        """
        :returns: {str: [metric_score] -> float}
            A dictionary where keys are the names of submetrics and values are
            functions that aggregate a list of metric scores
        """

        return {
            "acc": mean,
            "precision": _xstance_agg_precision,
            "recall": _xstance_agg_recall,
            "f1": _xstance_agg_f1,
        }

    def higher_is_better(self):
        return {"acc": True, "precision": True, "recall": True, "f1": True}


# German part of the dataset
class XStanceDE(XStance):
    DATASET_NAME = "de"
    TOPIC = "Thema: "
    OPINION = "Meine Meinung (dafür oder dagegen): "
    STANCE = "Meine Meinung ist (dafür oder dagegen): "
    FAVOR = "dafür"
    AGAINST = "dagegen"


# French part of the dataset
class XStanceFR(XStance):
    DATASET_NAME = "fr"
    TOPIC = "Thème: "
    OPINION = "Mon opinion (pour ou contre): "
    STANCE = "Mon opinion est (pour ou contre): "
    FAVOR = "pour"
    AGAINST = "contre"
